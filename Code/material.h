#ifndef MATERIAL_H
#define MATERIAL_H

#include "color.h"
#include "image.h"

class material {
    private:
        double ks, kd, reflectivity, refractiveIndex;
        int specularExponent;
        color diffuseColor, specularColor;
        bool isReflective, isRefractive;
        image texture;

        bool hasTexture = false;
    public:
        // generated by copilot
        material() {}
        material(double ks, double kd, double reflectivity, double refractiveIndex, int specularExponent, color diffuseColor, color specularColor, bool isReflective, bool isRefractive) : 
            ks(ks), kd(kd), reflectivity(reflectivity), refractiveIndex(refractiveIndex), specularExponent(specularExponent), 
            diffuseColor(diffuseColor), specularColor(specularColor), 
            isReflective(isReflective), isRefractive(isRefractive) {};
        material(double ks, double kd, double reflectivity, double refractiveIndex, int specularExponent, color diffuseColor, color specularColor, bool isReflective, bool isRefractive, std::string textureFilename) : 
            ks(ks), kd(kd), reflectivity(reflectivity), refractiveIndex(refractiveIndex), specularExponent(specularExponent), 
            diffuseColor(diffuseColor), specularColor(specularColor), 
            isReflective(isReflective), isRefractive(isRefractive) {
                texture = image(textureFilename);
                hasTexture = true;
            };

        double get_ks() const { return ks; };
        double get_kd() const { return kd; };
        double get_reflectivity() const { return reflectivity; };
        double get_refractive_index() const { return refractiveIndex; };
        int get_specular_exponent() const { return specularExponent; };

        color get_diffuse_color() const { 
            return diffuseColor; 
        };
        color get_specular_color() const { 
            return specularColor; 
        };
        image get_texture() const { return texture; };

        bool get_is_reflective() const { return isReflective; };
        bool get_is_refractive() const { return isRefractive; };
        bool get_has_texture() const { return hasTexture; };

};

#endif