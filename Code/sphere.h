
#include "shape.h"
#include "material.h"
using std::sqrt;

// ALL GENERATED BY COPILOT
class sphere : public shape {
    // class definition
    private:
        point3 center;
        double radius;
        material mat;
    public:
        sphere() {}
        sphere(const point3& center, double radius)
            : center(center), radius(radius)
        {}
        sphere(const point3& center,  const material& mat, double radius)
            : center(center), radius(radius), mat(mat)
        {}

        point3 get_center() const { return center; }
        double get_radius() const { return radius; }

        material get_material() const override {return mat;}

        double intersection(const ray& r) const override {
            // std::cerr << "THIS IS THE SPHERE INTERSECTION" << std::endl;
            vec3 oc = r.origin() - center;

            // we have an equation to solve: 
            auto a = dot(r.direction(), r.direction());
            auto b = 2.0 * dot(oc, r.direction());
            auto c = dot(oc, oc) - radius*radius;
            auto discriminant = b*b - 4*a*c; // the square root term in the quadratic formula

            // return (discriminant >= 0);

            auto t1 = -b + sqrt(discriminant) / (2.0*a);
            auto t2 = -b - sqrt(discriminant) / (2.0*a);

            if (t1 < 0 && t2 < 0) return -1; // both solutions are negative, meaning the object is BEHIND the camera, so who cares lol
            if (t1 < 0) return t2; // t1 is negative, so return t2
            if (t2 < 0) return t1; // t2 is negative, so return t1
            return (t1 < t2) ? t1 : t2; // both are positive, so return the smaller one
        }

        // copilot babey
        vec3 get_normal(point3 point) const override {
            return unit_vector(point - center);
        }
};
