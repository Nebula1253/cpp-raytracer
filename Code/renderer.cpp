// Taken from Raytracing in One Weekend, modified from there
# include "utility.h"
# include "bvhnode.h"
#include <algorithm>

std::string renderMode;
Camera cam;
Scene sce;
BVHNode root;
int maxNrBounces;

bool inShadow(const Point3& point, int shapeIndex, const PointLight& light) {
    // suggested by copilot
    // biasing here not necessary because i'm automatically avoiding self-intersection using shapeIndex
    Ray shadowRay(point, light.getPosition() - point);

    // generated by copilot after typing in "lightDistance"
    auto lightDistance = (light.getPosition() - point).length();

    // generated by copilot
    for (int i = 0; i < sce.getShapes().size(); ++i) {
        // just skip shadows for objects with refractive materials
        if (i != shapeIndex && !sce.getShapes()[i]->getMaterial().getIsRefractive()) {
            Shape* currentShape = sce.getShapes()[i];
            double intersect = currentShape->intersection(shadowRay);
            if (intersect > 0 && intersect < lightDistance) {
                return true;
            }
        }
    }
    
    return false;
}

Ray reflectRay(const Ray& r, const Point3& point, const Shape* s) {
    // https://web.cse.ohio-state.edu/~shen.94/681/Site/Slides_files/reflection_refraction.pdf used as reference
    // generated by copilot
    Vec3 normalVector = s->getNormal(point);
    Vec3 viewVector = unit_vector(point - r.origin());
    Vec3 reflectedVector = viewVector - (2 * dot(viewVector, normalVector) * normalVector);
    Ray reflectedRay(point, reflectedVector);
    return reflectedRay;
}

Color rayColor(const Ray& r, int recursionDepth = 0, bool originIsRefractive = false) {
    Shape* closestShape;
    int closestShapeIndex;
    double closestIntersection = -1;

    // for (int i = 0; i < sce.getShapes().size(); ++i) {
    //     Shape* currentShape = sce.getShapes()[i];
    //     double intersect = currentShape->intersection(r);
    //     if (currentShape->getBoundingBox().hit(r)) {
    //         if (intersect != -1) {
    //             if (intersect < closestIntersection || closestIntersection == -1) {
    //                 closestIntersection = intersect;
    //                 closestShape = currentShape;
    //                 closestShapeIndex = i;
    //             }
    //         } 
    //     }
    // }
    closestIntersection = root.hit(r, closestShape);
    // std::cerr << "closestIntersection: " << closestIntersection << "\n";
    // closestShapeIndex = std::distance(sce.getShapes().begin(), std::find(sce.getShapes().begin(), sce.getShapes().end(), closestShape)); // also generated by copilot


    if (closestIntersection == -1) {
        return sce.getBackgroundColor();
    }
    
    if (renderMode == "binary") {
        return Color(1,0,0);
    }
    else if (renderMode == "phong") {
        Point3 pointOnSurface = r.at(closestIntersection);

        if (recursionDepth <= maxNrBounces) {
            if (closestShape->getMaterial().getIsReflective()) {
                Ray reflectedRay = reflectRay(r, pointOnSurface, closestShape);
                Color reflectedColor = rayColor(reflectedRay, recursionDepth + 1);
                
                return closestShape->getMaterial().getReflectivity() * reflectedColor;
            }
            if (closestShape->getMaterial().getIsRefractive()) {
                auto refractiveIndex = closestShape->getMaterial().getRefractiveIndex();
                Vec3 normalVector = closestShape->getNormal(pointOnSurface);
                Vec3 viewVector = unit_vector(pointOnSurface - r.origin());

                double eta_t;
                if (!originIsRefractive) {
                    eta_t = 1.0 / refractiveIndex;
                }
                else {
                    eta_t = refractiveIndex;
                }

                auto normalViewDot = dot(normalVector, viewVector);
                auto sqrtTerm = 1 - eta_t*eta_t * (1 - normalViewDot*normalViewDot);

                if (sqrtTerm < 0) {
                    // total internal reflection
                    Ray reflectedRay = reflectRay(r, pointOnSurface, closestShape);
                    Color reflectedColor = rayColor(reflectedRay, recursionDepth + 1, originIsRefractive);
                    
                    return closestShape->getMaterial().getReflectivity() * reflectedColor;
                }
                else {
                    // refraction
                    Vec3 refractedVector = (eta_t * normalViewDot - sqrt(1 - eta_t*eta_t * (1 - normalViewDot*normalViewDot))) * normalVector - (eta_t * viewVector);
                    Ray refractedRay(pointOnSurface + (0.001 * refractedVector), refractedVector);
                    Color refractedColor = rayColor(refractedRay, recursionDepth + 1, !originIsRefractive);

                    return refractedColor;
                }
            }
        }
        
        // ambient light term - completely arbitrary
        Color pointColor = 0.4 * closestShape->getDiffuseColor(pointOnSurface);

        bool inShadowFromOtherLight = false;
        // diffuse and specular light term
        for (int j = 0; j < sce.getLights().size(); ++j) {
            
            auto currentLight = sce.getLights()[j];
            // std::cerr << "currentLight: " << currentLight->getPosition() << "\n";
            Color lightIntensity = currentLight->getIntensity();

            if (inShadow(pointOnSurface, closestShapeIndex, *currentLight)) {
                // if the point is also in shadow from something else 
                if (inShadowFromOtherLight) {
                    // picked out at random
                    pointColor = 0.8 * pointColor;
                }
                else inShadowFromOtherLight = true;
                continue;
            }

            auto kd = closestShape->getMaterial().getKD();
            auto ks = closestShape->getMaterial().getKS();
            auto specularExponent = closestShape->getMaterial().getSpecularExponent();

                Color materialDiffuseColor = closestShape->getDiffuseColor(pointOnSurface);
                Color materialSpecularColor = closestShape->getMaterial().getSpecularColor();

                Vec3 lightVector = unit_vector(currentLight->getPosition() - pointOnSurface);
                Vec3 normalVector = closestShape->getNormal(pointOnSurface);
                Vec3 viewVector = unit_vector(r.origin() - pointOnSurface);

                auto lightNormalDot = std::max(dot(lightVector, normalVector), 0.0);

                Vec3 halfwayVector = unit_vector(lightVector + viewVector);
                auto normalHalfwayDot = std::max(dot(normalVector, halfwayVector), 0.0);

                Color diffuseColor = kd * lightNormalDot * materialDiffuseColor * lightIntensity;
                Color specularColor = ks * pow(normalHalfwayDot, specularExponent) * materialSpecularColor * lightIntensity;

                pointColor = pointColor + diffuseColor + specularColor;
        }
        
        
        return pointColor;
    }
        
    return sce.getBackgroundColor();
}

Material parseMaterial(const json& j) {
    // auto sphereMaterial = j["material"];

    auto ks = j["ks"].get<double>();
    auto kd = j["kd"].get<double>();

    auto specularExponent = j["specularexponent"].get<int>();

    auto isReflective = j["isreflective"].get<bool>();
    auto reflectivity = j["reflectivity"].get<double>();

    auto isRefractive = j["isrefractive"].get<bool>();
    auto refractiveIndex = j["refractiveindex"].get<double>();

    auto diffuse = j["diffusecolor"].get<std::vector<double>>();
    Color diffuseColor = Color(diffuse[0], diffuse[1], diffuse[2]);

    auto specular = j["specularcolor"].get<std::vector<double>>();
    Color specularColor = Color(specular[0], specular[1], specular[2]);

    if (j.contains("texturefile")) {
        auto textureFilename = j["texturefile"].get<std::string>();
        Material mat = Material(ks, kd, reflectivity, refractiveIndex, specularExponent, 
                            diffuseColor, specularColor, isReflective, isRefractive, textureFilename);
        return mat;
    }

    Material mat = Material(ks, kd, reflectivity, refractiveIndex, specularExponent, 
                            diffuseColor, specularColor, isReflective, isRefractive);
    return mat;
}

void parseCameraParams(const json& j) {
    // generated by copilot line by line
    auto cameraPos = j["position"].get<std::vector<double>>();
    Point3 cameraPosition(cameraPos[0], cameraPos[1], cameraPos[2]);

    auto cameraLookAt = j["lookAt"].get<std::vector<double>>();
    Vec3 cameraLookAtVector(cameraLookAt[0], cameraLookAt[1], cameraLookAt[2]);

    auto cameraUpVec = j["upVector"].get<std::vector<double>>();
    Vec3 cameraUpVector(cameraUpVec[0], cameraUpVec[1], cameraUpVec[2]);

    auto cameraWidth = j["width"].get<int>();
    auto cameraHeight = j["height"].get<int>();
    auto cameraFov = j["fov"].get<double>();

    // implement the exposure once that's something you actually have to care about lol

    cam = Camera(cameraWidth, cameraHeight, cameraPosition, cameraLookAtVector, cameraUpVector, cameraFov, 1.0);
    // return cam;
}

void parseSceneParams(const json& j) {
    // Parse scene parameters
    // following 2 lines generated by copilot
    auto sceneBackgroundColorData = j["backgroundcolor"].get<std::vector<double>>();
    Color sceneBackgroundColor(sceneBackgroundColorData[0], sceneBackgroundColorData[1], sceneBackgroundColorData[2]);

    std::vector<PointLight*> lightsources;
    if (renderMode != "binary") {
        auto sceneLightSources = j["lightsources"];
        std::cerr << "sceneLightSources: " << sceneLightSources << "\n";
        if (!j["lightsources"].is_null()) {
            for (int i = 0; i < sceneLightSources.size(); ++i) {
                auto light = sceneLightSources[i];
                
                auto lightPosition = light["position"].get<std::vector<double>>();
                Point3 lightPositionPoint(lightPosition[0], lightPosition[1], lightPosition[2]);

                auto lightIntensity = light["intensity"].get<std::vector<double>>();
                Color lightIntensityColor(lightIntensity[0], lightIntensity[1], lightIntensity[2]);

                PointLight* l = new PointLight(lightPositionPoint, lightIntensityColor);
                
                lightsources.push_back(l);
            }
        }
    }

    auto sceneShapes = j["shapes"];
    std::vector<Shape*> shapes;

    for (int i = 0; i < sceneShapes.size(); ++i) {
        auto shapeType = sceneShapes[i]["type"].get<std::string>();

        Material mat;
        if (!sceneShapes[i]["material"].is_null()) {
            mat = parseMaterial(sceneShapes[i]["material"]);
        }

        // generated by copilot
        if (shapeType == "sphere") {
            sphere* s;
            auto sphereCenter = sceneShapes[i]["center"].get<std::vector<double>>();
            Point3 sphereCenterPoint(sphereCenter[0], sphereCenter[1], sphereCenter[2]);

            auto sphereRadius = sceneShapes[i]["radius"].get<double>();

            if (!sceneShapes[i]["material"].is_null()) {
                s = new sphere(sphereCenterPoint, mat, sphereRadius);
            }
            else {
                s = new sphere(sphereCenterPoint, sphereRadius);
            }
            shapes.push_back(s);
        }
        else if (shapeType == "triangle") {
            auto v0 = sceneShapes[i]["v0"].get<std::vector<double>>();
            Point3 v0Point(v0[0], v0[1], v0[2]);

            auto v1 = sceneShapes[i]["v1"].get<std::vector<double>>();
            Point3 v1Point(v1[0], v1[1], v1[2]);

            auto v2 = sceneShapes[i]["v2"].get<std::vector<double>>();
            Point3 v2Point(v2[0], v2[1], v2[2]);

            triangle* tri;
            if (!sceneShapes[i]["material"].is_null()) {
                tri = new triangle(v0Point, v1Point, v2Point, mat);
            }
            else {
                tri = new triangle(v0Point, v1Point, v2Point);
            }
            shapes.push_back(tri);
        }
        else if (shapeType == "cylinder") {
            auto cylinderCenter = sceneShapes[i]["center"].get<std::vector<double>>();
            Point3 cylinderCenterPoint(cylinderCenter[0], cylinderCenter[1], cylinderCenter[2]);

            auto cylinderAxis = sceneShapes[i]["axis"].get<std::vector<double>>();
            Vec3 cylinderAxisVector(cylinderAxis[0], cylinderAxis[1], cylinderAxis[2]);

            auto cylinderRadius = sceneShapes[i]["radius"].get<double>();
            auto cylinderHeight = sceneShapes[i]["height"].get<double>();

            Cylinder* cyl;
            if (!sceneShapes[i]["material"].is_null()) {
                cyl = new Cylinder(cylinderCenterPoint, cylinderAxisVector, mat, cylinderRadius, cylinderHeight);
            }
            else {
                cyl = new Cylinder(cylinderCenterPoint, cylinderAxisVector, cylinderRadius, cylinderHeight);
            }
            shapes.push_back(cyl);
        }
    }

    sce = Scene(sceneBackgroundColor, shapes, lightsources);
}


int main(int argc, char *argv[]) {
    // assuming the file name of the JSON file is passed as the first argument
    // retrieve data from the JSON file
    std::string filepath = __FILE__;
    std::cerr << filepath << "\n";
    std::string base_filename = "Code/" + filepath.substr(filepath.find_last_of("/") + 1);
    filepath.erase(filepath.length() - base_filename.length());

    std::ifstream jsonFile(filepath + argv[1]);
    json j = json::parse(jsonFile);

    renderMode = j["rendermode"].get<std::string>();
    maxNrBounces = j["nbounces"].get<int>();
    std::cerr << "maxNrBounces: " << maxNrBounces << "\n";

    // Parse camera parameters
    parseCameraParams(j["camera"]);

    // Parse scene parameters
    parseSceneParams(j["scene"]);

    root = BVHNode(sce.getShapes(), 0, sce.getShapes().size());

    // Render
    std::vector<Color> pixels;
    for (int j = 0; j < cam.getHeight(); ++j) { 
        std::clog << "\rScanlines remaining: " << (cam.getHeight() - j) << ' ' << std::flush;

        for (int i = 0; i < cam.getWidth(); ++i) {
            auto pixel_center = cam.getPixel00Loc() + (i * cam.getPixelDeltaU()) + (j * cam.getPixelDeltaV());
            auto ray_direction = pixel_center - cam.getPosition();
            Ray r(cam.getPosition(), ray_direction);
            
            Color pixel_color = rayColor(r);
            pixels.push_back(pixel_color);
        }
    }

    Image outputImage(cam.getWidth(), cam.getHeight(), pixels);
    outputImage.writeToFile(filepath + argv[2]);

    std::clog << "\rDone.                 \n";
}