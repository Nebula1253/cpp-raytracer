// Taken from Raytracing in One Weekend, modified from there
#include "color.h"
#include "ray.h"
#include "vec3.h"
#include "sphere.h"
#include "triangle.h"
#include "cylinder.h"
#include "camera.h"
#include <vector>
#include "shape.h"
#include "scene.h"
#include "json.hpp"
using json = nlohmann::json;
#include <fstream>

#include <iostream>

color ray_color(const ray& r, scene& s) {
    for (int i = 0; i < s.getShapes().size(); ++i) {
        bool intersect = s.getShapes()[i]->intersection(r);
        if (intersect) return color(1,0,0);
    }
    return s.getBackgroundColor();
}

int main(int argc, char *argv[]) {
    // assuming the file name of the JSON file is passed as the first argument
    // retrieve data from the JSON file
    std::string filepath = __FILE__;
    filepath.erase(filepath.length() - 13);

    std::ifstream jsonFile(filepath + argv[1]);
    json j = json::parse(jsonFile);

    // Parse camera parameters
    // generated by copilot
    auto cameraPos = j["camera"]["position"].get<std::vector<double>>();
    point3 cameraPosition(cameraPos[0], cameraPos[1], cameraPos[2]);

    auto cameraLookAt = j["camera"]["lookAt"].get<std::vector<double>>();
    vec3 cameraLookAtVector(cameraLookAt[0], cameraLookAt[1], cameraLookAt[2]);

    auto cameraUpVec = j["camera"]["upVector"].get<std::vector<double>>();
    vec3 cameraUpVector(cameraUpVec[0], cameraUpVec[1], cameraUpVec[2]);

    auto cameraWidth = j["camera"]["width"].get<int>();
    auto cameraHeight = j["camera"]["height"].get<int>();
    auto cameraFov = j["camera"]["fov"].get<double>();

    camera cam = camera(cameraWidth, cameraHeight, cameraPosition, cameraLookAtVector, cameraUpVector, cameraFov, 1.0);

    // Parse scene parameters
    // following 2 lines generated by copilot
    auto sceneBackgroundColorData = j["scene"]["backgroundcolor"].get<std::vector<double>>();
    color sceneBackgroundColor(sceneBackgroundColorData[0], sceneBackgroundColorData[1], sceneBackgroundColorData[2]);

    auto sceneShapes = j["scene"]["shapes"];
    std::vector<shape*> shapes;

    for (int i = 0; i < sceneShapes.size(); ++i) {
        auto shapeType = sceneShapes[i]["type"].get<std::string>();

        // generated by copilot
        if (shapeType == "sphere") {
            auto sphereCenter = sceneShapes[i]["center"].get<std::vector<double>>();
            point3 sphereCenterPoint(sphereCenter[0], sphereCenter[1], sphereCenter[2]);

            auto sphereRadius = sceneShapes[i]["radius"].get<double>();

            sphere s = sphere(sphereCenterPoint, sphereRadius);
            shapes.push_back(&s);
        }
        else if (shapeType == "triangle") {
            auto v0 = sceneShapes[i]["v0"].get<std::vector<double>>();
            point3 v0Point(v0[0], v0[1], v0[2]);

            auto v1 = sceneShapes[i]["v1"].get<std::vector<double>>();
            point3 v1Point(v1[0], v1[1], v1[2]);

            auto v2 = sceneShapes[i]["v2"].get<std::vector<double>>();
            point3 v2Point(v2[0], v2[1], v2[2]);

            triangle tri = triangle(v0Point, v1Point, v2Point);
            shapes.push_back(&tri);
        }
        else if (shapeType == "cylinder") {
            auto cylinderCenter = sceneShapes[i]["center"].get<std::vector<double>>();
            point3 cylinderCenterPoint(cylinderCenter[0], cylinderCenter[1], cylinderCenter[2]);

            auto cylinderAxis = sceneShapes[i]["axis"].get<std::vector<double>>();
            vec3 cylinderAxisVector(cylinderAxis[0], cylinderAxis[1], cylinderAxis[2]);

            auto cylinderRadius = sceneShapes[i]["radius"].get<double>();
            auto cylinderHeight = sceneShapes[i]["height"].get<double>();

            cylinder cyl = cylinder(cylinderCenterPoint, cylinderAxisVector, cylinderRadius, cylinderHeight);
            shapes.push_back(&cyl);
        }
    }

    scene sce = scene(sceneBackgroundColor, shapes);

    for (int j = 0; j < cam.getHeight(); ++j) {
        std::clog << "\rScanlines remaining: " << (cam.getHeight() - j) << ' ' << std::flush;

        for (int i = 0; i < cam.getWidth(); ++i) {
            auto pixel_center = cam.getPixel00Loc() + (i * cam.getPixelDeltaU()) + (j * cam.getPixelDeltaV());
            auto ray_direction = pixel_center - cam.getPosition();
            ray r(cam.getPosition(), ray_direction);
            
            color pixel_color = ray_color(r, sce);
            write_color(std::cout, pixel_color);
        }
    }

    std::clog << "\rDone.                 \n";
}